def solution(skill, skill_trees):
    
    count = 0
    skill = list(skill)
    for i in range(len(skill_trees)):
        answer = True 
        res=[]
        num=[]
        for j in skill_trees[i]:
            if j in skill:
                res.append(j)
        for k in range(len(res)):
            for g in range(len(skill)):
                if res[k] == skill[g]:
                    num.append(res[k])
        for n in range(len(num)):
            if num[n] != skill[n] :
                answer = False
        if answer == True:
            count += 1
    return count
    
    
    
    간단한 문젠데 엄청 헤맸고ㅠ__ㅠ
    길고 복잡한 코드라 올리지 말까 고민하다가 그냥 올림..
    
    
    
 //C++ 코드. for문을 저렇게 쓸수 밖에 없는걸까..?
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
int solution(string skill, vector<string> skill_trees){
	int answer = 0;
	//bool check = true; //얘는 여기에 있으면 안되는걸까? -> 이 위치에 있으면 오류가 난다...ㄷㄷ...
	for(int i = 0; i<skill_trees.size(); i++){
		vector<char> compare;
		for(int j = 0; j<skill_trees[i].size(); j++){
			for(int k = 0; k<skill.size(); k++){
				if(skill_trees[i][j] == skill[k]){
					char tmp = skill[k];
					compare.push_back(skill[k]);
				}
			}
		}
		bool check = true;
		for(int m = 0; m<compare.size(); m++){
			if(compare[m] != skill[m]){
				check = false;
			}
		}
		if(check) answer++;
	}
	return answer;
}
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

